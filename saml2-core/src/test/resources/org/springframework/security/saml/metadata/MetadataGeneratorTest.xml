<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-2.0.xsd
              http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <!--<context:component-scan base-package="org.springframework.security.saml"/>-->

    <!-- Central storage of cryptographic keys -->
    <bean id="keyManager" class="org.springframework.security.saml.key.JKSKeyManager">
        <constructor-arg value="classpath:org/springframework/security/saml/key/keystore.jks"/>
        <constructor-arg type="java.lang.String" value="nalle123"/>
        <constructor-arg>
            <map>
                <entry key="apollo" value="nalle123"/>
            </map>
        </constructor-arg>
        <constructor-arg type="java.lang.String" value="apollo"/>
    </bean>

    <!-- IDP Metadata configuration - paths to metadata of IDPs in circle of trust is here -->
    <!-- Do no forget to call iniitalize method on providers -->
    <bean id="metadata" class="org.springframework.security.saml.metadata.CachingMetadataManager">
        <constructor-arg index="0">
            <list/>
        </constructor-arg>
        <property name="hostedSPName" value="hostedSP"/>
        <!-- OPTIONAL property: can tell the system which IDP should be used for authenticating user by default. -->
        <property name="defaultIDP" value="nest3"/>
        <property name="refreshCheckInterval" value="10000"/>
        <property name="keyManager" ref="keyManager" />
    </bean>

    <!-- Entry point to initialize authentication, default values taken from properties file -->
    <bean id="samlEntryPoint" class="org.springframework.security.saml.SAMLEntryPoint">
        <property name="defaultProfileOptions">
            <bean class="org.springframework.security.saml.websso.WebSSOProfileOptions">
                <property name="includeScoping" value="false"/>
            </bean>
        </property>
    </bean>

    <!-- Register authentication manager with SAML provider 
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="samlAuthenticationProvider"/>
    </security:authentication-manager>-->
    <bean id="authenticationManager" class="org.springframework.security.providers.ProviderManager">
        <property name="providers">
            <list>
                <ref local="samlAuthenticationProvider" />                
            </list>
        </property>
    </bean>

    <bean id="samlProcessingFilter" class="org.springframework.security.saml.SAMLProcessingFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="sAMLProcessor" ref="processor" />
        <property name="contextProvider" ref="contextProvider" />
        <!--<property name="authenticationSuccessHandler" ref="successRedirectHandler"/>-->
    </bean>

    <!--<bean id="successRedirectHandler"
          class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
    </bean>-->

    <bean id="samlLogoutProcessingFilter" class="org.springframework.security.saml.SAMLLogoutProcessingFilter">
        <constructor-arg value="/" /><!--ref="successLogoutHandler"/>-->
        <constructor-arg ref="logoutHandler"/>
    </bean>

    <!-- Handler for successful logout -->
    <!--<bean id="successLogoutHandler"
          class="org.springframework.security.web.authentication.logout.SimpleUrlLogoutSuccessHandler">
        <property name="defaultTargetUrl" value="/"/>
    </bean>-->

    <bean id="logoutHandler"
          class="org.springframework.security.ui.logout.SecurityContextLogoutHandler">
        <property name="invalidateHttpSession" value="false"/>
    </bean>

    <!-- XML parser pool needed for OpenSAML parsing -->
    <bean id="parserPool" class="org.opensaml.xml.parse.BasicParserPool" scope="singleton"/>

    <!-- Initialization of OpenSAML library-->
    <bean class="org.springframework.security.saml.SAMLBootstrap"/>

    <!-- Class is capable of generating SP metadata describing the currently running environnment -->
    <bean id="metadataGenerator" class="org.springframework.security.saml.metadata.MetadataGenerator">
        <property name="keyManager" ref="keyManager" />
    </bean>

    <!-- SAML 2.0 Web SSO profile -->
    <bean id="webSSOprofile" class="org.springframework.security.saml.websso.WebSSOProfileImpl">
        <property name="metadata" ref="metadata" />
        <property name="processor" ref="processor" />
    </bean>

    <!-- Class loading incoming SAML messages from httpRequest stream -->
    <bean id="processor" class="org.springframework.security.saml.processor.SAMLProcessorImpl">
        <constructor-arg>
            <list>
                <ref bean="redirectBinding"/>
            </list>
        </constructor-arg>
    </bean>

    <bean id="redirectBinding" class="org.springframework.security.saml.processor.HTTPRedirectDeflateBinding">
        <constructor-arg ref="parserPool"/>
    </bean>

    <!-- Logger for SAML messages and events -->
    <bean id="samlLogger" class="org.springframework.security.saml.log.SAMLDefaultLogger"/>

    <!-- Provider of default SAML Context -->
    <bean id="contextProvider" class="org.springframework.security.saml.context.SAMLContextProviderImpl">
        <property name="keyManager" ref="keyManager" />
        <property name="metadata" ref="metadata" />
    </bean>

    <!-- Factory which disables message storage capabilities -->
    <bean class="org.springframework.security.saml.storage.EmptyStorageFactory"/>

    <bean id="samlAuthenticationProvider" class="org.springframework.security.saml.SAMLAuthenticationProvider">
        <property name="consumer" ref="webSSOprofileConsumer" />
        <property name="hokConsumer" ref="hokWebSSOprofileConsumer" />
        <property name="samlLogger" ref="samlLogger" />
    </bean>

    <!-- SAML 2.0 Assertion Consumer -->
    <bean id="webSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerImpl">
        <property name="metadata" ref="metadata" />
        <property name="processor" ref="processor" />
        
    </bean>


    <bean id="hokWebSSOprofileConsumer" class="org.springframework.security.saml.websso.WebSSOProfileConsumerHoKImpl">
        <property name="metadata" ref="metadata" />
        <property name="processor" ref="processor" />
    </bean>

    <!-- SAML 2.0 Logout Profile -->
    <bean id="logoutprofile" class="org.springframework.security.saml.websso.SingleLogoutProfileImpl">
        <property name="metadata" ref="metadata" />
        <property name="processor" ref="processor" />
    </bean>

</beans>